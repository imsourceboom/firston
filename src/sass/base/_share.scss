@mixin loopFunc($className, $styleName, $min, $max, $unit, $direction: null) {
  @if $direction == "vertical" {
    @for $i from $min through $max {
      #{$className + $i} {
        #{$styleName}: #{$i + $unit} 0 !important;
      }
    }
  } @else if $direction == "horizontal" {
    @for $i from $min through $max {
      #{$className + $i} {
        #{$styleName}: 0 #{$i + $unit} !important;
      }
    }
  } @else {
    @for $i from $min through $max {
      #{$className + $i} {
        #{$styleName}: #{$i + $unit} !important;
      }
    }
  }
}

@mixin decimalLoopFunc(
  $className,
  $styleName,
  $min,
  $max,
  $unit,
  $direction: null
) {
  $decimal: ".";

  @if $direction == "vertical" {
    @for $i from $min through $max {
      #{$className + $i} {
        #{$styleName}: #{$decimal}#{$i + $unit} 0 !important;
      }
    }
  } @else if $direction == "horizontal" {
    @for $i from $min through $max {
      #{$className + $i} {
        #{$styleName}: 0 #{$decimal}#{$i + $unit} !important;
      }
    }
  } @else {
    @for $i from $min through $max {
      #{$className + $i} {
        #{$styleName}: #{$decimal}#{$i + $unit} !important;
      }
    }
  }
}

@mixin loopFuncCalculation(
  $className,
  $styleName,
  $min,
  $max,
  $offset,
  $unit: null,
  $arithmetic: null
) {
  @if $arithmetic == "divide" {
    @for $i from $min through $max {
      #{$className + $i * $offset} {
        #{$styleName}: #{$i / $offset + $unit} !important;
      }
    }
  }
  @if $arithmetic == "multiply" {
    @for $i from $min through $max {
      #{$className + $i * $offset} {
        #{$styleName}: #{$i * $offset + $unit} !important;
      }
    }
  }
}

/* opacity */
@include loopFuncCalculation(".opacity-", "opacity", 0, 10, 10, "", "divide");

/* width */
@include loopFuncCalculation(".w-", "width", 1, 10, 10, "%", "multiply");
.w-max-initial {
  max-width: none !important;
}

/* height */
@include loopFuncCalculation(".h-", "height", 1, 10, 10, "%");

/* margin */
.m-auto {
  margin: 0 auto;
}
@include loopFunc(".m-", "margin", 0, 5, "rem");
@include loopFunc(".mt-", "margin-top", 0, 5, "rem");
@include loopFunc(".ml-", "margin-left", 0, 5, "rem");
@include loopFunc(".mr-", "margin-right", 0, 5, "rem");
@include loopFunc(".mb-", "margin-bottom", 0, 5, "rem");
@include loopFunc(".my-", "margin", 0, 5, "rem", "vertical");
@include loopFunc(".mx-", "margin", 0, 5, "rem", "horizontal");
@include decimalLoopFunc(".m-0", "margin", 1, 9, "rem");
@include decimalLoopFunc(".mt-0", "margin-top", 1, 9, "rem");
@include decimalLoopFunc(".mr-0", "margin-right", 1, 9, "rem");
@include decimalLoopFunc(".mb-0", "margin-bottom", 1, 9, "rem");
@include decimalLoopFunc(".ml-0", "margin-left", 1, 9, "rem");
@include decimalLoopFunc(".my-0", "margin", 1, 9, "rem", "vertical");
@include decimalLoopFunc(".mx-0", "margin", 1, 9, "rem", "horizontal");

/* padding */
@include loopFunc(".p-", "padding", 0, 5, "rem");
@include loopFunc(".pt-", "padding-top", 0, 5, "rem");
@include loopFunc(".pl-", "padding-left", 0, 5, "rem");
@include loopFunc(".pr-", "padding-right", 0, 5, "rem");
@include loopFunc(".pb-", "padding-bottom", 0, 5, "rem");
@include loopFunc(".py-", "padding", 0, 5, "rem", "vertical");
@include loopFunc(".px-", "padding", 0, 5, "rem", "horizontal");
@include decimalLoopFunc(".p-0", "padding", 1, 9, "rem");
@include decimalLoopFunc(".pt-0", "padding-top", 1, 9, "rem");
@include decimalLoopFunc(".pr-0", "padding-right", 1, 9, "rem");
@include decimalLoopFunc(".pb-0", "padding-bottom", 1, 9, "rem");
@include decimalLoopFunc(".pl-0", "padding-left", 1, 9, "rem");
@include decimalLoopFunc(".py-0", "padding", 1, 9, "rem", "vertical");
@include decimalLoopFunc(".px-0", "padding", 1, 9, "rem", "horizontal");

/* color */
.color-white {
  color: white;
}
.color-black {
  color: black;
}

/* font weight */
.font-light {
  font-weight: lighter !important;
}
.font-bold {
  font-weight: bold !important;
}

/* text align */
.text-center {
  text-align: center !important;
}

/* word */
.white-space-nowrap {
  white-space: nowrap;
}

/* flex */
.flex {
  display: flex !important;

  &.column {
    flex-direction: column !important;
  }
  &.row {
    flex-direction: row !important;
  }
  &.flex-wrap {
    flex-wrap: wrap !important;
  }
}
.direction-column {
  flex-direction: column !important;
}
.flex-wrap {
  flex-wrap: wrap !important;
}
.justify-start {
  justify-content: flex-start !important;
}
.justify-center {
  justify-content: center !important;
}
.justify-end {
  justify-content: flex-end !important;
}
.justify-around {
  justify-content: space-around !important;
}
.justify-between {
  justify-content: space-between !important;
}
.align-start {
  align-items: flex-start !important;
}
.align-center {
  align-items: center !important;
}
.align-end {
  align-items: flex-end !important;
}
.align-around {
  align-items: space-around !important;
}
.align-between {
  align-items: space-between !important;
}

/* position */
.absolute {
  position: absolute;
}
.relative {
  position: relative;
}
.fixed {
  position: fixed;
}
.centered-x {
  position: absolute;
  top: 0;
  left: 50%;
  transform: translateX(-50%);
}
.centered-y {
  position: absolute;
  top: 50%;
  left: 0;
  transform: translateY(-50%);
}

/* display */
.block {
  display: block;
}
.inline-block {
  display: inline-block;
}
.inline {
  display: inline;
}
.none {
  display: none;
}

/* visibility */
.visible {
  visibility: visible;
}
.hidden {
  visibility: hidden;
}

/* textarea */
.resize-none {
  resize: none;
}

/* border */
.border-0 {
  border: 0 !important;
}
